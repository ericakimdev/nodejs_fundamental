const iterable = [10, 20, 30];
for (const value of iterable) {
  console.log(value);
}
// 10
// 20
// 30

// Iterating over a String
const iterable = 'boo';
for (const value of iterable) {
  console.log(value);
}
// "b"
// "o"
// "o"

const iterable = new Map([['a', 1], ['b', 2], ['c', 3]]);
for (const entry of iterable) {
  console.log(entry);
}
// ['a', 1]
// ['b', 2]
// ['c', 3]

for (const [key, value] of iterable) {
  console.log(value);
}
// 1
// 2
// 3

// Iterating over a Set
const iterable = new Set([1, 1, 2, 2, 3, 3]);
for (const value of iterable) {
  console.log(value);
}
// 1
// 2
// 3

// ECMAScript 2017 introduced a new Object.entries function. You can use this to iterate the object as you wanted.
const object = {'a': 1, 'b': 2, 'c' : 3};
for (const [key, value] of Object.entries(object)) {
  console.log(key, value);
}
// a 1
// b 2
// c 3

// In ECMAScript 2015, you can use Map.prototype.entries.
var myMap = new Map();
myMap.set("0", "foo");
myMap.set(1, "foo1");
myMap.set({}, "foo2");

var iter = myMap.entries();
console.log(iter.next().value); // ["0", "foo"]
console.log(iter.next().value); // [1, "foo1"]
console.log(iter.next().value); // [Object, "foo2"]

// Or iterate with for..of
var myMap2 = new Map();
myMap2.set("0", "foo1");
myMap2.set(1, "foo2");

for (const entry of myMap2.entries()) {
  console.log(entry);
}

for (const [key, value] of myMap2.entries()) {
  console.log(key, value);
}

// for...in and for...of
// for in loops over enumerable property names of an object.
// for of (new in ES6) does use an object-specific iterator and loops over the values generated by that.
// for..in returns a list of keys on the object being iterated
// for..of returns a list of values of the numeric properties of the object being iterated.
var arr = [3, 5, 7];
arr.foo = "hello";
    
for (var i in arr) {
  console.log(i); // logs "0", "1", "2", "foo"
}
    
for (var i of arr) {
  console.log(i); // logs "3", "5", "7"
  // it doesn't log "3", "5", "7", "hello"
}
